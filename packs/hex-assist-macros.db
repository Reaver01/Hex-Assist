{"name":"Reset Hidden Tiles","permission":{"default":0,"kRBqReHVbsxBFxmH":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const activeScene = game.scenes.active;\r\nconst sceneTiles = canvas.scene.data.tiles.reduce((updates, t) => {\r\n\r\n    if (t.img.indexOf(game.settings.get(\"Hex-Assist\", \"tileName\")) > -1 && t.hidden === true) {\r\n        updates.push({\r\n            _id: t._id,\r\n            \"hidden\": false,\r\n        });\r\n        return updates;\r\n    } else {\r\n        return updates;\r\n    }\r\n}, []);\r\nconst updates = sceneTiles;\r\nactiveScene.updateEmbeddedEntity(\"Tile\", updates);","author":"kRBqReHVbsxBFxmH","img":"icons/svg/eye.svg","actorIds":[],"_id":"38ima3NRJPwJfCeo"}
{"name":"Hex Crawler","permission":{"default":0,"kRBqReHVbsxBFxmH":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const navigatorName = game.settings.get(\"Hex-Assist\", \"navigator\");\r\nlet defaultNavigator;\r\n\r\nif (canvas.tokens.controlled.length === 0 && !navigatorName) {\r\n    return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n} else if (navigatorName) {\r\n    defaultNavigator = game.actors.entities.find(a => a.data.name === navigatorName);\r\n    if (!defaultNavigator) {\r\n        return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n    }\r\n}\r\n\r\nconst currentScene = canvas.scene;\r\nconst gridType = currentScene.data.gridType;\r\n\r\nif (gridType !== 4 && gridType !== 2) {\r\n    return ui.notifications.error(\"The current grid is not a Hex Grid!\");\r\n}\r\n\r\nconst playerMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"tokenName\"));\r\nconst locationMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"actualName\"));\r\nconst directionMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"direction\"));\r\n\r\nlet pX = playerMarker.x;\r\nlet pY = playerMarker.y;\r\nlet lX = locationMarker.x;\r\nlet lY = locationMarker.y;\r\nlet dX = (directionMarker) ? directionMarker.x : 0;\r\nlet dY = (directionMarker) ? directionMarker.y : 0;\r\n\r\nconst gridSize = canvas.grid.size;\r\n\r\nconst vertical = gridSize * 0.866666;\r\nconst horizontal = gridSize * 0.866666;\r\nlet diagVertical = gridSize * 0.433333;\r\nlet diagHorizontal = gridSize * 0.75;\r\n\r\nif (gridType === 2) {\r\n    diagVertical = gridSize * 0.75;\r\n    diagHorizontal = gridSize * 0.433333;\r\n}\r\n\r\nconst range = gridSize / 10;\r\nlet updates = [];\r\n\r\nlet formContent = `<form><div class=\"form-group\"><label>Hex Type:</label><select id=\"hex-type\" name=\"hex-type\">`;\r\nconst tableNames = game.settings.get(\"Hex-Assist\", \"tables\").split(\",\");\r\ntableNames.forEach(name => {\r\n    formContent += `<option value=\"` + name + `\">` + name + `</option>`;\r\n});\r\nformContent += `</select></div><div class=\"form-group\"><label>Travel Direction:</label><select id=\"travel-direction\" name=\"travel-direction\">\r\n`;\r\nif (directionMarker) {\r\n    formContent += `<option value=\"Marker\">Marker</option>`;\r\n}\r\nif (gridType === 2) {\r\n    formContent += `<option value=\"East\">East</option>`;\r\n}\r\nif (gridType === 4) {\r\n    formContent += `<option value=\"North\">North</option>`;\r\n}\r\nformContent += `<option value=\"Northeast\">Northeast</option><option value=\"Northwest\">Northwest</option>`;\r\nif (gridType === 4) {\r\n    formContent += `<option value=\"North\">South</option>`;\r\n}\r\nformContent += `<option value=\"Southeast\">Southeast</option><option value=\"Southwest\">Southwest</option>`;\r\n\r\nif (gridType === 2) {\r\n    formContent += `<option value=\"West\">West</option>`;\r\n}\r\nformContent += `</select></div><div class=\"form-group\"><label>Travel Type:</label><select id=\"travel-type\" name=\"travel-type\"><option value=\"on-foot\">On Foot</option><option value=\"canoe\">By Canoe</option></select></div></form>`;\r\n\r\nlet pace = 'none';\r\nnew Dialog({\r\n    title: `Hex Crawl Helper`,\r\n    content: formContent,\r\n    buttons: {\r\n        slow: {\r\n            icon: \"<i class='fas fa-user-ninja'></i>\",\r\n            label: `Slow Pace`,\r\n            callback: () => pace = 'slow'\r\n        },\r\n        average: {\r\n            icon: \"<i class='fas fa-hiking'></i>\",\r\n            label: `Average Pace`,\r\n            callback: () => pace = 'average'\r\n        },\r\n        fast: {\r\n            icon: \"<i class='fas fa-running'></i>\",\r\n            label: `Fast Pace`,\r\n            callback: () => pace = 'fast'\r\n        }\r\n    },\r\n    default: \"average\",\r\n    close: html => {\r\n        let hexType = html.find('[name=\"hex-type\"]')[0].value;\r\n        let travelType = html.find('[name=\"travel-type\"]')[0].value;\r\n        let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\r\n        if (playerDirection === \"Marker\") {\r\n            if (dY < pY && (dX === pX || (dX > pX - range && dX < pX + range))) {\r\n                if (gridType === 2) {\r\n                    playerDirection = [\"Northeast\", \"Northwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n                if (gridType === 4) {\r\n                    playerDirection = \"North\";\r\n                }\r\n            } else if (dY > pY && (dX === pX || (dX > pX - range && dX < pX + range))) {\r\n                if (gridType === 2) {\r\n                    playerDirection = [\"Southeast\", \"Southwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n                if (gridType === 4) {\r\n                    playerDirection = \"South\";\r\n                }\r\n            } else if (dX < pX && (dX === pX || (dY > pY - range && dY < pY + range))) {\r\n                if (gridType === 2) {\r\n                    playerDirection = \"West\";\r\n                }\r\n                if (gridType === 4) {\r\n                    playerDirection = [\"Northwest\", \"Southwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n            } else if (dX > pX && (dX === pX || (dY > pY - range && dY < pY + range))) {\r\n                if (gridType === 2) {\r\n                    playerDirection = \"East\";\r\n                }\r\n                if (gridType === 4) {\r\n                    playerDirection = [\"Northeast\", \"Southeast\"][Math.floor(Math.random() * 2)];\r\n                }\r\n            } else if (dX < pX && dY < pY) {\r\n                playerDirection = \"Northwest\";\r\n            } else if (dX > pX && dY < pY) {\r\n                playerDirection = \"Northeast\";\r\n            } else if (dX < pX && dY > pY) {\r\n                playerDirection = \"Southwest\";\r\n            } else if (dX > pX && dY > pY) {\r\n                playerDirection = \"Southeast\";\r\n            }\r\n        }\r\n        let directions = [\"North\", \"Northeast\", \"Northwest\", \"South\", \"Southeast\", \"Southwest\"];\r\n        if (gridType === 2) {\r\n            directions = [\"West\", \"Northeast\", \"Northwest\", \"East\", \"Southeast\", \"Southwest\"];\r\n        }\r\n        const encounterTable = game.tables.entities.find(t => t.name === hexType);\r\n        const weatherTable = game.tables.entities.find(t => t.name === game.settings.get(\"Hex-Assist\", \"weather\"));\r\n        let weatherRoll = \"\";\r\n        if (weatherTable) {\r\n            weatherRoll = weatherTable.roll().results[0].text;\r\n        } else {\r\n            weatherRoll = [\"Light Rain\", \"Heavy Rain\", \"Tropical Storm\"][Math.floor(Math.random() * 3)]\r\n        }\r\n        let lostDirection = directions[Math.floor(Math.random() * directions.length)];\r\n        let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\r\n        let navigator = defaultNavigator;\r\n        if (!navigator) {\r\n            navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\r\n        }\r\n        if (!navigator) {\r\n            return;\r\n        }\r\n        let wis = navigator.data.data.abilities.wis.mod;\r\n        let survivalDC = 10;\r\n        let survival = new Roll(`1d20`).roll().total + wis;\r\n        let survival2 = new Roll(`1d20`).roll().total + wis;\r\n        if (weatherRoll.indexOf('Tropical storm') > -1 && survival > survival2) {\r\n            survival = survival2;\r\n        }\r\n        let slowPace = new Roll(`1d4`).roll().total;\r\n        let fastPace = new Roll(`1d2`).roll().total;\r\n        let hexesMoved = 1;\r\n        let encounter = '';\r\n        let hexText = 'hexes';\r\n\r\n        if (travelType === 'canoe') {\r\n            hexesMoved++;\r\n        }\r\n\r\n        if (pace === 'slow') {\r\n            if (slowPace === 1)\r\n                hexesMoved--;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival += 5;\r\n        } else if (pace === 'average') {\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n        } else if (pace === 'fast') {\r\n            if (fastPace === 1)\r\n                hexesMoved++;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival -= 5;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        if (Number(encounterTable.data.description)) {\r\n            survivalDC = Number(encounterTable.data.description);\r\n        }\r\n\r\n        if (survival < survivalDC) {\r\n            msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\r\n            if (locationMarker) {\r\n                switch (lostDirection) {\r\n                    case 'South':\r\n                        lX = locationMarker.x;\r\n                        lY = locationMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        lX = locationMarker.x;\r\n                        lY = locationMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        lX = locationMarker.x + (horizontal * hexesMoved);\r\n                        lY = locationMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        lX = locationMarker.x - (horizontal * hexesMoved);\r\n                        lY = locationMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (playerMarker) {\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        pX = playerMarker.x;\r\n                        pY = playerMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        pX = playerMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        pX = playerMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        pX = playerMarker.x;\r\n                        pY = playerMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        pX = playerMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        pX = playerMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        pX = playerMarker.x + (horizontal * hexesMoved);\r\n                        pY = playerMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        pX = playerMarker.x - (horizontal * hexesMoved);\r\n                        pY = playerMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        } else {\r\n            if (playerMarker && locationMarker) {\r\n\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        pX = lX = locationMarker.x;\r\n                        pY = lY = locationMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        pX = lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        pX = lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        pX = lX = locationMarker.x;\r\n                        pY = lY = locationMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        pX = lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        pX = lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        pX = lX = locationMarker.x + (horizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        pX = lX = locationMarker.x - (horizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (playerMarker) {\r\n            updates.push({\r\n                _id: playerMarker._id,\r\n                x: pX,\r\n                y: pY\r\n            });\r\n        }\r\n\r\n        if (locationMarker) {\r\n            updates.push({\r\n                _id: locationMarker._id,\r\n                x: lX,\r\n                y: lY\r\n            });\r\n        }\r\n\r\n        if (updates.length > 0) {\r\n            currentScene.updateEmbeddedEntity(\"Token\", updates);\r\n        }\r\n\r\n        msgContent += '<strong>Morning Encounter:</strong> ';\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n            msgContent += '<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n            msgContent += '<br/><br/><strong>Evening Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n        } else {\r\n            msgContent += 'None.';\r\n        }\r\n\r\n        if (game.settings.get(\"Hex-Assist\", \"journal\")) {\r\n            let journal = game.journal.entities.find(j => j.data.name === \"Encounters\");\r\n            if (journal) {\r\n                journal.update({\r\n                    content: msgContent\r\n                })\r\n            } else {\r\n                JournalEntry.create({\r\n                    name: \"Encounters\",\r\n                    content: msgContent\r\n                });\r\n                journal = game.journal.entities.find(j => j.data.name === \"Encounters\");\r\n            }\r\n            journal.show();\r\n        } else {\r\n            let chatData = {\r\n                content: msgContent,\r\n                whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n            };\r\n            ChatMessage.create(chatData, {});\r\n        }\r\n\r\n        if (game.modules.get(\"calendar-weather\") && game.settings.get(\"Hex-Assist\", \"day\")) {\r\n            game.Gametime.advanceTime({\r\n                days: 1\r\n            })\r\n        }\r\n    }\r\n}).render(true);","author":"kRBqReHVbsxBFxmH","img":"icons/svg/target.svg","actorIds":[],"_id":"4oebEykWTZ3zs0jP"}
{"$$deleted":true,"_id":"4oebEykWTZ3zs0jP"}
{"name":"Hex Crawler","permission":{"default":0,"3JuVawZs9MhXL1yI":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"const navigatorName = game.settings.get(\"Hex-Assist\", \"navigator\");\r\nlet defaultNavigator;\r\n\r\nif (canvas.tokens.controlled.length === 0 && !navigatorName) {\r\n    return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n} else if (navigatorName) {\r\n    defaultNavigator = game.actors.entities.find(a => a.data.name === navigatorName);\r\n    if (!defaultNavigator) {\r\n        return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n    }\r\n}\r\n\r\nconst currentScene = canvas.scene;\r\nconst gridType = currentScene.data.gridType;\r\n\r\nif (gridType < 2 && gridType > 5) {\r\n    return ui.notifications.error(\"The current grid is not a Hex Grid!\");\r\n}\r\n\r\nconst playerMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"tokenName\"));\r\nconst locationMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"actualName\"));\r\nconst directionMarker = currentScene.data.tokens.find(a => a.name === game.settings.get(\"Hex-Assist\", \"direction\"));\r\n\r\nlet pX = playerMarker.x;\r\nlet pY = playerMarker.y;\r\nlet lX = locationMarker.x;\r\nlet lY = locationMarker.y;\r\nlet dX = (directionMarker) ? directionMarker.x : 0;\r\nlet dY = (directionMarker) ? directionMarker.y : 0;\r\n\r\nconst gridSize = canvas.grid.size;\r\n\r\nconst vertical = gridSize * 0.866666;\r\nconst horizontal = gridSize * 0.866666;\r\nlet diagVertical = gridSize * 0.433333;\r\nlet diagHorizontal = gridSize * 0.75;\r\n\r\nif (gridType === 2 || gridType === 3) {\r\n    diagVertical = gridSize * 0.75;\r\n    diagHorizontal = gridSize * 0.433333;\r\n}\r\n\r\nconst range = gridSize / 10;\r\nlet updates = [];\r\n\r\nlet formContent = `<form><div class=\"form-group\"><label>Hex Type:</label><select id=\"hex-type\" name=\"hex-type\">`;\r\nconst tableNames = game.settings.get(\"Hex-Assist\", \"tables\").split(\",\");\r\ntableNames.forEach(name => {\r\n    formContent += `<option value=\"` + name + `\">` + name + `</option>`;\r\n});\r\nformContent += `</select></div><div class=\"form-group\"><label>Travel Direction:</label><select id=\"travel-direction\" name=\"travel-direction\">\r\n`;\r\nif (directionMarker) {\r\n    formContent += `<option value=\"Marker\">Marker</option>`;\r\n}\r\nif (gridType === 2 || gridType === 3) {\r\n    formContent += `<option value=\"East\">East</option>`;\r\n}\r\nif (gridType === 4 || gridType === 5) {\r\n    formContent += `<option value=\"North\">North</option>`;\r\n}\r\nformContent += `<option value=\"Northeast\">Northeast</option><option value=\"Northwest\">Northwest</option>`;\r\nif (gridType === 4 || gridType === 5) {\r\n    formContent += `<option value=\"North\">South</option>`;\r\n}\r\nformContent += `<option value=\"Southeast\">Southeast</option><option value=\"Southwest\">Southwest</option>`;\r\n\r\nif (gridType === 2 || gridType === 3) {\r\n    formContent += `<option value=\"West\">West</option>`;\r\n}\r\nformContent += `</select></div><div class=\"form-group\"><label>Travel Type:</label><select id=\"travel-type\" name=\"travel-type\"><option value=\"on-foot\">On Foot</option><option value=\"canoe\">By Canoe</option></select></div></form>`;\r\n\r\nlet pace = 'none';\r\nnew Dialog({\r\n    title: `Hex Crawl Helper`,\r\n    content: formContent,\r\n    buttons: {\r\n        slow: {\r\n            icon: \"<i class='fas fa-user-ninja'></i>\",\r\n            label: `Slow Pace`,\r\n            callback: () => pace = 'slow'\r\n        },\r\n        average: {\r\n            icon: \"<i class='fas fa-hiking'></i>\",\r\n            label: `Average Pace`,\r\n            callback: () => pace = 'average'\r\n        },\r\n        fast: {\r\n            icon: \"<i class='fas fa-running'></i>\",\r\n            label: `Fast Pace`,\r\n            callback: () => pace = 'fast'\r\n        }\r\n    },\r\n    default: \"average\",\r\n    close: html => {\r\n        let hexType = html.find('[name=\"hex-type\"]')[0].value;\r\n        let travelType = html.find('[name=\"travel-type\"]')[0].value;\r\n        let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\r\n        if (playerDirection === \"Marker\") {\r\n            if (dY < pY && (dX === pX || (dX > pX - range && dX < pX + range))) {\r\n                if (gridType === 2 || gridType === 3) {\r\n                    playerDirection = [\"Northeast\", \"Northwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n                if (gridType === 4 || gridType === 5) {\r\n                    playerDirection = \"North\";\r\n                }\r\n            } else if (dY > pY && (dX === pX || (dX > pX - range && dX < pX + range))) {\r\n                if (gridType === 2 || gridType === 3) {\r\n                    playerDirection = [\"Southeast\", \"Southwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n                if (gridType === 4 || gridType === 5) {\r\n                    playerDirection = \"South\";\r\n                }\r\n            } else if (dX < pX && (dX === pX || (dY > pY - range && dY < pY + range))) {\r\n                if (gridType === 2 || gridType === 3) {\r\n                    playerDirection = \"West\";\r\n                }\r\n                if (gridType === 4 || gridType === 5) {\r\n                    playerDirection = [\"Northwest\", \"Southwest\"][Math.floor(Math.random() * 2)];\r\n                }\r\n            } else if (dX > pX && (dX === pX || (dY > pY - range && dY < pY + range))) {\r\n                if (gridType === 2 || gridType === 3) {\r\n                    playerDirection = \"East\";\r\n                }\r\n                if (gridType === 4 || gridType === 5) {\r\n                    playerDirection = [\"Northeast\", \"Southeast\"][Math.floor(Math.random() * 2)];\r\n                }\r\n            } else if (dX < pX && dY < pY) {\r\n                playerDirection = \"Northwest\";\r\n            } else if (dX > pX && dY < pY) {\r\n                playerDirection = \"Northeast\";\r\n            } else if (dX < pX && dY > pY) {\r\n                playerDirection = \"Southwest\";\r\n            } else if (dX > pX && dY > pY) {\r\n                playerDirection = \"Southeast\";\r\n            }\r\n        }\r\n        let directions = [\"North\", \"Northeast\", \"Northwest\", \"South\", \"Southeast\", \"Southwest\"];\r\n        if (gridType === 2 || gridType === 3) {\r\n            directions = [\"West\", \"Northeast\", \"Northwest\", \"East\", \"Southeast\", \"Southwest\"];\r\n        }\r\n        const encounterTable = game.tables.entities.find(t => t.name === hexType);\r\n        const weatherTable = game.tables.entities.find(t => t.name === game.settings.get(\"Hex-Assist\", \"weather\"));\r\n        let weatherRoll = \"\";\r\n        if (weatherTable) {\r\n            weatherRoll = weatherTable.roll().results[0].text;\r\n        } else {\r\n            weatherRoll = [\"Light Rain\", \"Heavy Rain\", \"Tropical Storm\"][Math.floor(Math.random() * 3)]\r\n        }\r\n        let lostDirection = directions[Math.floor(Math.random() * directions.length)];\r\n        let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\r\n        let navigator = defaultNavigator;\r\n        if (!navigator) {\r\n            navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\r\n        }\r\n        if (!navigator) {\r\n            return;\r\n        }\r\n        let wis = navigator.data.data.abilities.wis.mod;\r\n        let survivalDC = 10;\r\n        let survival = new Roll(`1d20`).roll().total + wis;\r\n        let survival2 = new Roll(`1d20`).roll().total + wis;\r\n        if (weatherRoll.indexOf('Tropical storm') > -1 && survival > survival2) {\r\n            survival = survival2;\r\n        }\r\n        let slowPace = new Roll(`1d4`).roll().total;\r\n        let fastPace = new Roll(`1d2`).roll().total;\r\n        let hexesMoved = 1;\r\n        let encounter = '';\r\n        let hexText = 'hexes';\r\n\r\n        if (travelType === 'canoe') {\r\n            hexesMoved++;\r\n        }\r\n\r\n        if (pace === 'slow') {\r\n            if (slowPace === 1)\r\n                hexesMoved--;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival += 5;\r\n        } else if (pace === 'average') {\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n        } else if (pace === 'fast') {\r\n            if (fastPace === 1)\r\n                hexesMoved++;\r\n            if (hexesMoved === 1)\r\n                hexText = 'hex';\r\n            msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            survival -= 5;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        if (Number(encounterTable.data.description)) {\r\n            survivalDC = Number(encounterTable.data.description);\r\n        }\r\n\r\n        if (survival < survivalDC) {\r\n            msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\r\n            if (locationMarker) {\r\n                switch (lostDirection) {\r\n                    case 'South':\r\n                        lX = locationMarker.x;\r\n                        lY = locationMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        lX = locationMarker.x;\r\n                        lY = locationMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        lX = locationMarker.x + (horizontal * hexesMoved);\r\n                        lY = locationMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        lX = locationMarker.x - (horizontal * hexesMoved);\r\n                        lY = locationMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            if (playerMarker) {\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        pX = playerMarker.x;\r\n                        pY = playerMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        pX = playerMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        pX = playerMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        pX = playerMarker.x;\r\n                        pY = playerMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        pX = playerMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        pX = playerMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = playerMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        pX = playerMarker.x + (horizontal * hexesMoved);\r\n                        pY = playerMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        pX = playerMarker.x - (horizontal * hexesMoved);\r\n                        pY = playerMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        } else {\r\n            if (playerMarker && locationMarker) {\r\n\r\n                switch (playerDirection) {\r\n                    case 'South':\r\n                        pX = lX = locationMarker.x;\r\n                        pY = lY = locationMarker.y + (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southwest':\r\n                        pX = lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Southeast':\r\n                        pX = lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y + (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'North':\r\n                        pX = lX = locationMarker.x;\r\n                        pY = lY = locationMarker.y - (vertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northwest':\r\n                        pX = lX = locationMarker.x - (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'Northeast':\r\n                        pX = lX = locationMarker.x + (diagHorizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y - (diagVertical * hexesMoved);\r\n                        break;\r\n\r\n                    case 'East':\r\n                        pX = lX = locationMarker.x + (horizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y;\r\n                        break;\r\n\r\n                    case 'West':\r\n                        pX = lX = locationMarker.x - (horizontal * hexesMoved);\r\n                        pY = lY = locationMarker.y;\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (playerMarker) {\r\n            updates.push({\r\n                _id: playerMarker._id,\r\n                x: pX,\r\n                y: pY\r\n            });\r\n        }\r\n\r\n        if (locationMarker) {\r\n            updates.push({\r\n                _id: locationMarker._id,\r\n                x: lX,\r\n                y: lY\r\n            });\r\n        }\r\n\r\n        if (updates.length > 0) {\r\n            currentScene.updateEmbeddedEntity(\"Token\", updates);\r\n        }\r\n\r\n        msgContent += '<strong>Morning Encounter:</strong> ';\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n            msgContent += '<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n            msgContent += '<br/><br/><strong>Evening Encounter:</strong> ';\r\n        } else {\r\n            msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\r\n        }\r\n\r\n        if (new Roll(`1d20`).roll().total > 15) {\r\n            encounter = encounterTable.roll().results[0].text;\r\n            msgContent += encounter;\r\n        } else {\r\n            msgContent += 'None.';\r\n        }\r\n\r\n        if (game.settings.get(\"Hex-Assist\", \"journal\")) {\r\n            let journal = game.journal.entities.find(j => j.data.name === \"Encounters\");\r\n            if (journal) {\r\n                journal.update({\r\n                    content: msgContent\r\n                })\r\n            } else {\r\n                JournalEntry.create({\r\n                    name: \"Encounters\",\r\n                    content: msgContent\r\n                });\r\n                journal = game.journal.entities.find(j => j.data.name === \"Encounters\");\r\n            }\r\n            journal.show();\r\n        } else {\r\n            let chatData = {\r\n                content: msgContent,\r\n                whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n            };\r\n            ChatMessage.create(chatData, {});\r\n        }\r\n\r\n        if (game.modules.get(\"calendar-weather\") && game.settings.get(\"Hex-Assist\", \"day\")) {\r\n            game.Gametime.advanceTime({\r\n                days: 1\r\n            })\r\n        }\r\n    }\r\n}).render(true);","author":"3JuVawZs9MhXL1yI","img":"icons/svg/target.svg","actorIds":[],"_id":"bJgiogVUVVSCJAvV"}
